# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

variables:
  hugo_version: "0.58.2"

jobs:
- job: build
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: GoTool@0
    inputs:
      version: '1.13'
    displayName: "Install go"

  - script: |
      curl -LO https://github.com/gohugoio/hugo/releases/download/v$(hugo_version)/hugo_$(hugo_version)_Linux-64bit.deb
      curl -LO https://github.com/gohugoio/hugo/releases/download/v$(hugo_version)/hugo_extended_$(hugo_version)_Linux-64bit.deb
      mkdir -p $(Build.SourcesDirectory)/hugo_dir
      dpkg -x hugo_$(hugo_version)_Linux-64bit.deb $(Build.SourcesDirectory)/hugo_dir
      dpkg -x hugo_extended_$(hugo_version)_Linux-64bit.deb $(Build.SourcesDirectory)/hugo_dir
    displayName: "Install Hugo"

  - script: $(Build.SourcesDirectory)/hugo_dir/usr/local/bin/hugo --i18n-warnings
    displayName: "Build site"
    condition: succeeded()

  - task: CopyFiles@2
    inputs:
      sourceFolder: 'public'
      contents: '**'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: "Stage build"
    condition: succeeded()

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: 'website'
    displayName: "Publish build"
    condition: succeeded()

- deployment: deploy
  dependsOn:
  - build
  condition: |
    and(
      succeeded('build'),
      and(
        not(eq(variables['Build.Reason'], 'PullRequest')),
        eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    )
  pool:
    vmImage: 'ubuntu-latest'
  environment: lucianopaz_github_io

  strategy:
    runOnce:
      deploy:
        steps:
        - task: InstallSSHKey@0
          name: install_sshkey
          inputs:
            knownHostsEntry: "github.com"
            sshPublicKey: $(sshPublicDeployKey)
            sshKeySecureFile: github_website_deploy_key
            sshPassphrase: $(passphrase)
          displayName: "Install repository's deploy key"

        - script: |
            ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
          name: register_known_hosts
          displayName: "Register github as known host"

        - script: |
            git clone ssh://git@github.com/lucianopaz/lucianopaz.github.io.git
            rm -r *
          displayName: 'Clone website repository and erase old content'
          condition: succeeded()

        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            buildVersionToDownload: 'latest'
            artifactName: 'website'
            downloadPath: '$(Pipeline.Workspace)'
          displayName: 'Download built website artifact'
          condition: succeeded()

        - script: |
            git config --local user.name "lucianopaz"
            git config --local user.email $(github_email)
            git add .
            git commit -m "$(Build.SourceVersionMessage)  ***NO_CI***"
          displayName: 'Commit built website'
          condition: succeeded()

        - script: |
            git remote set-url --push origin git@github.com:lucianopaz/lucianopaz.github.io.git
            git push origin HEAD:master
          displayName: 'Publish GitHub Pages'
          condition: |
            and(succeeded(),
                and(not(eq(variables['Build.Reason'], 'PullRequest')),
                    eq(variables['Build.SourceBranch'], 'refs/heads/master'))
                )