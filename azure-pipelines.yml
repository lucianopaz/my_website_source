# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- master

variables:
  hugo_version: "0.58.2"

jobs:
- job: build
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: GoTool@0
    inputs:
      version: '1.13'
    displayName: "Install go"

  - task: NodeTool@0 
    inputs:
      versionSpec: 9.x
    displayName: "Install node"

  - script: |
      npm install -g postcss-cli
      npm install -g autoprefixer
    displayName: "Install npm dependencies"

  - script: |
      curl -LO https://github.com/gohugoio/hugo/releases/download/v$(hugo_version)/hugo_$(hugo_version)_Linux-64bit.deb
      curl -LO https://github.com/gohugoio/hugo/releases/download/v$(hugo_version)/hugo_extended_$(hugo_version)_Linux-64bit.deb
      mkdir -p $(Build.SourcesDirectory)/hugo_dir
      dpkg -x hugo_$(hugo_version)_Linux-64bit.deb $(Build.SourcesDirectory)/hugo_dir
      dpkg -x hugo_extended_$(hugo_version)_Linux-64bit.deb $(Build.SourcesDirectory)/hugo_dir
    displayName: "Install Hugo"

  - script: $(Build.SourcesDirectory)/hugo_dir/usr/local/bin/hugo --i18n-warnings
    displayName: "Build site"
    condition: succeeded()

  - task: CopyFiles@2
    inputs:
      contents: 'public/**'
      targetFolder: $(Build.ArtifactStagingDirectory)
    displayName: "Stage build"
    condition: succeeded()

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: 'website'
    displayName: "Publish build"
    condition: succeeded()

- job: deploy
  dependsOn:
  - build
  condition: |
    and(
    false, and(
      succeeded('build'),
      and(
        not(eq(variables['Build.Reason'], 'PullRequest')),
        eq(variables['Build.SourceBranch'], 'refs/heads/master')
      )
    )
    )
  pool:
    vmImage: 'ubuntu-latest'
  workspace:
    clean: 'resources'  # Clear all the created content and downloaded repo information

  steps:
  - script: |
      git config --local user.name "lucianopaz"
      git config --local user.email $(github_email)
      git add docs/html
      git commit -m "Publishing GitHub Pages  ***NO_CI***"
    displayName: 'Commit built documentation'
    condition: succeeded()

  - task: InstallSSHKey@0
    name: install_sshkey
    inputs:
      knownHostsEntry: "github.com"
      sshPublicKey: $(sshpublicDeployKey)
      sshKeySecureFile: github_website_deploy_key
      sshPassphrase: $(passphrase)
    displayName: "Install repository's deploy key"
    condition: succeeded()

  - script: |
      ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    name: register_known_hosts
    displayName: "Register github as known host"
    condition: succeeded()